{
  "code": "200",
  "message": "成功返回数据",
  "body": {
    "post_id": 3245,
    "post_date": "2016-11-06T16:57:35.000Z",
    "post_content": "<strong>栈是一种遵从后进先出（LIFO，last-in-first-out）原则的有序集合</strong>。新添加的活待删除的元素都保存在栈的末尾，称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底。\n\n<h2>一个用来表示栈的类</h2>\n\n<pre><code class=\"javascript\">\nclass Stack {\n  constructor () {\n    this.items = []\n  }\n  /**\n   * *********************************************************************************\n   *                                                                                  *\n   * 核心方法\n   *                                                                                  *\n   ***********************************************************************************/\n  // 添加一个（或几个）新元素到栈顶\n  push (...elements) {\n    for (let elem of elements) {\n      this.items.push(elem)\n    }\n  }\n  // 移除栈顶的元素，同时返回被移除的元素\n  pop () {\n    return this.items.pop()\n  }\n  /**\n   * *********************************************************************************\n   *                                                                                  *\n   * 辅助方法\n   *                                                                                  *\n   ***********************************************************************************/\n  // 返回栈顶的元素，不对栈做任何修改（这个方法不会移除栈顶的元素，仅仅返回它）\n  peek () {\n    return this.items[this.items.length - 1]\n  }\n  // 如果栈里没有任何元素就返回true，否则返回false\n  isEmpty () {\n    return this.items.length === 0\n  }\n  // 移除栈里的所有元素\n  clear () {\n    this.items = []\n  }\n  // 返回栈里的元素个数，这个方法和数组的length属性类似\n  size () {\n    return items.length\n  }\n  // 打印栈里的所有元素\n  print () {\n    console.log(this.items.toString())\n  }\n}\n</code>\n</pre>\n\n<h2>Stack类的使用</h2>\n\n<pre><code class=\"javascript\">\n// 十进制数转化成二进制、八进制或十六进制数\nfunction baseConverter (decNumber, base = 2) {\n  let remStack = new Stack()\n  let rem\n  let baseString = ''\n  let digits = '0123456789ABCDEF'\n  while (decNumber &gt; 0) {\n    rem = Math.floor(decNumber % base)\n    remStack.push(rem)\n    decNumber = Math.floor(decNumber / base)\n  }\n  while (!remStack.isEmpty()) {\n    baseString += digits[remStack.pop()]\n  }\n  return baseString\n}\n</code>\n</pre>\n\n<h2>参考资料</h2>\n\n《学习JavaScript数据结构与算法》",
    "post_title": "Stack built with Javascript",
    "cat_slug": "javascript",
    "cat_name": "JavaScript"
  }
}
